//=============================================================================
// File Name: SVD.imp
// Written by: Shai Shalev-Shwartz (01.03.2006)
//=============================================================================
#ifndef _SHAIS_SVD_IMP_
#define _SHAIS_SVD_IMP_

#include <infra.h>
#include <cmath>

#define TINY 1.0e-20

static double dsqrarg;
#define DSQR(a) ((dsqrarg=(a)) == 0.0 ? 0.0 : dsqrarg*dsqrarg)

static double dmaxarg1,dmaxarg2;
#define DMAX(a,b) (dmaxarg1=(a),dmaxarg2=(b),(dmaxarg1) > (dmaxarg2) ?\
        (dmaxarg1) : (dmaxarg2))

#define SIGN(a,b) ((b) >= 0.0 ? fabs(a) : -fabs(a))

static int iminarg1,iminarg2;
#define IMIN(a,b) (iminarg1=(a),iminarg2=(b),(iminarg1) < (iminarg2) ?\
        (iminarg1) : (iminarg2))



inline double dpythag(double a, double b)
{
  double absa,absb;
  absa=fabs(a);
  absb=fabs(b);
  if (absa > absb) return absa*sqrt(1.0+DSQR(absb/absa));
  else return (absb == 0.0 ? 0.0 : absb*sqrt(1.0+DSQR(absa/absb)));
}


//-----------------------------------------------------------------------------
/** Performs SVD on a matrix A = a * diag(w) * v^t  where,
    @param A an input infra matrix A on which we perform the SVD
    @param w an infra vector with the singular values
    @param a an infra matrix with left hand base 
    @param v an infra matrix with right hand base 
*/
inline void SVDdecomposition(const infra::matrix_base A, 
			     infra::vector &w,
			     infra::matrix &a, infra::matrix &v)
{

  int n = A.width();
  int m = A.height();

  infra_assert( A.height() != 0 && A.width() != 0,
		"When calling SVDdecomposition, the size of A must be at least 1 on 1");	      

  a.resize(A.height(),A.width());
  w.resize(A.width());
  v.resize(A.width(),A.width());
  a = A; // copy A into a

  int flag,i,its,j,jj,k,l,nm;
  double anorm,c,f,g,h,s,scale,x,y,z;
  
  infra::vector rv1(n);
  g=scale=anorm=0.0;
  for (i=1;i<=n;i++) {
    l=i+1;
    rv1(i-1)=scale*g;
    g=s=scale=0.0;
    if (i <= m) {
      for (k=i;k<=m;k++) scale += fabs(a(k-1,i-1));
      if (scale) {
	for (k=i;k<=m;k++) {
	  a(k-1,i-1) /= scale;
	  s += a(k-1,i-1)*a(k-1,i-1);
	}
	f=a(i-1,i-1);
	g = -SIGN(sqrt(s),f);
	h=f*g-s;
	a(i-1,i-1)=f-g;
	for (j=l;j<=n;j++) {
	  for (s=0.0,k=i;k<=m;k++) s += a(k-1,i-1)*a(k-1,j-1);
	  f=s/h;
	  for (k=i;k<=m;k++) a(k-1,j-1) += f*a(k-1,i-1);
	}
	for (k=i;k<=m;k++) a(k-1,i-1) *= scale;
      }
    }
    w(i-1)=scale *g;
    g=s=scale=0.0;
    if (i <= m && i != n) {
      for (k=l;k<=n;k++) scale += fabs(a(i-1,k-1));
      if (scale) {
	for (k=l;k<=n;k++) {
	  a(i-1,k-1) /= scale;
	  s += a(i-1,k-1)*a(i-1,k-1);
	}
	f=a(i-1,l-1);
	g = -SIGN(sqrt(s),f);
	h=f*g-s;
	a(i-1,l-1)=f-g;
	for (k=l;k<=n;k++) rv1(k-1)=a(i-1,k-1)/h;
	for (j=l;j<=m;j++) {
	  for (s=0.0,k=l;k<=n;k++) s += a(j-1,k-1)*a(i-1,k-1);
	  for (k=l;k<=n;k++) a(j-1,k-1) += s*rv1(k-1);
	}
	for (k=l;k<=n;k++) a(i-1,k-1) *= scale;
      }
    }
    anorm=DMAX(anorm,(fabs(w(i-1))+fabs(rv1(i-1))));
  }
  for (i=n;i>=1;i--) {
    if (i < n) {
      if (g) {
	for (j=l;j<=n;j++) v(j-1,i-1)=(a(i-1,j-1)/a(i-1,l-1))/g;
	for (j=l;j<=n;j++) {
	  for (s=0.0,k=l;k<=n;k++) s += a(i-1,k-1)*v(k-1,j-1);
	  for (k=l;k<=n;k++) v(k-1,j-1) += s*v(k-1,i-1);
	}
      }
      for (j=l;j<=n;j++) v(i-1,j-1)=v(j-1,i-1)=0.0;
    }
    v(i-1,i-1)=1.0;
    g=rv1(i-1);
    l=i;
  }
  for (i=IMIN(m,n);i>=1;i--) {
    l=i+1;
    g=w(i-1);
    for (j=l;j<=n;j++) a(i-1,j-1)=0.0;
    if (g) {
      g=1.0/g;
      for (j=l;j<=n;j++) {
	for (s=0.0,k=l;k<=m;k++) s += a(k-1,i-1)*a(k-1,j-1);
	f=(s/a(i-1,i-1))*g;
	for (k=i;k<=m;k++) a(k-1,j-1) += f*a(k-1,i-1);
      }
      for (j=i;j<=m;j++) a(j-1,i-1) *= g;
    } else for (j=i;j<=m;j++) a(j-1,i-1)=0.0;
    ++a(i-1,i-1);
  }
  for (k=n;k>=1;k--) {
    for (its=1;its<=30;its++) {
      flag=1;
      for (l=k;l>=1;l--) {
	nm=l-1;
	if ((double)(fabs(rv1(l-1))+anorm) == anorm) {
	  flag=0;
	  break;
	}
	if ((double)(fabs(w(nm-1))+anorm) == anorm) break;
      }
      if (flag) {
	c=0.0;
	s=1.0;
	for (i=l;i<=k;i++) {
	  f=s*rv1(i-1);
	  rv1(i-1)=c*rv1(i-1);
	  if ((double)(fabs(f)+anorm) == anorm) break;
	  g=w(i-1);
	  h=dpythag(f,g);
	  w(i-1)=h;
	  h=1.0/h;
	  c=g*h;
	  s = -f*h;
	  for (j=1;j<=m;j++) {
	    y=a(j-1,nm-1);
	    z=a(j-1,i-1);
	    a(j-1,nm-1)=y*c+z*s;
	    a(j-1,i-1)=z*c-y*s;
	  }
	}
      }
      z=w(k-1);
      if (l == k) {
	if (z < 0.0) {
	  w(k-1) = -z;
	  for (j=1;j<=n;j++) v(j-1,k-1) = -v(j-1,k-1);
	}
	break;
      }
      if (its == 30) {
	std::cerr << "In Calling SVD decomposition, with input matrix: "
		  << A << "no convergence in 30 iterations. Abort" 
		  << std::endl;
// 	std::cerr << "status is\na = \n" << a 
// 		  << "w = " << w << "\nv = " << v << std::endl;
	exit(EXIT_FAILURE);
      } 
      x=w(l-1);
      nm=k-1;
      y=w(nm-1);
      g=rv1(nm-1);
      h=rv1(k-1);
      f=((y-z)*(y+z)+(g-h)*(g+h))/(2.0*h*y);
      g=dpythag(f,1.0);
      f=((x-z)*(x+z)+h*((y/(f+SIGN(g,f)))-h))/x;
      c=s=1.0;
      for (j=l;j<=nm;j++) {
	i=j+1;
	g=rv1(i-1);
	y=w(i-1);
	h=s*g;
	g=c*g;
	z=dpythag(f,h);
	rv1(j-1)=z;
	c=f/z;
	s=h/z;
	f=x*c+g*s;
	g = g*c-x*s;
	h=y*s;
	y *= c;
	for (jj=1;jj<=n;jj++) {
	  x=v(jj-1,j-1);
	  z=v(jj-1,i-1);
	  v(jj-1,j-1)=x*c+z*s;
	  v(jj-1,i-1)=z*c-x*s;
	}
	z=dpythag(f,h);
	w(j-1)=z;
	if (z) {
	  z=1.0/z;
	  c=f*z;
	  s=h*z;
	}
	f=c*g+s*y;
	x=c*y-s*g;
	for (jj=1;jj<=m;jj++) {
	  y=a(jj-1,j-1);
	  z=a(jj-1,i-1);
	  a(jj-1,j-1)=y*c+z*s;
	  a(jj-1,i-1)=z*c-y*s;
	}
      }
      rv1(l-1)=0.0;
      rv1(k-1)=f;
      w(k-1)=x;
    }
    //  std::cerr << "its = " << its << std::endl;
  }


}



//-----------------------------------------------------------------------------
/** Solve A*x = b where A is given by SVD decomposition A = u * diag(w) * v^t
    @param u an input infra matrix
    @param w an infra vector
    @param v an infra matrix
    @param b an infra vector
    @return a vector_base of the solution
*/
inline infra::vector_base SVDbacksubstitue(infra::matrix_base u, infra::vector_base  w, infra::matrix_base v, 
		      infra::vector_base b)
{
  int m = b.size(); 
  int n = w.size();

  infra_assert( u.height() == b.size() && u.width() == w.size() && 
		v.height() == w.size() && v.width() == b.size(),
		"When calling SVDbacksubstitue, the size of u must be (m,n) "
		<< "the size of w must be n, the size of v must be (n,n), and "
		<< "the size of b must be m. ");


  infra::vector x(n);
  
  int jj,j,i;
  double s;
  
  infra::vector tmp(n); 
  for (j=1;j<=n;j++) {
    s=0.0;
    if (w(j-1)) {
      for (i=1;i<=m;i++) s += u(i-1,j-1)*b(i-1);
      s /= w(j-1);
    }
    tmp(j-1)=s;
  }
  for (j=1;j<=n;j++) {
    s=0.0;
    for (jj=1;jj<=n;jj++) s += v(j-1,jj-1)*tmp(jj-1);
    x(j-1)=s;
  }


  return(x);
}



//-----------------------------------------------------------------------------
/** Solve A*x = b in a roboust manner, using SVD decomposition.
    If A is not invertible than x is the least squares solution.
    @param A an input squared infra matrix_view 
    @param b an input infra target vector_view
    @param tolerance The tolerance to use in the inversion. Singular values
    smaller than tolerance are ignored. Default 1e-6
    @return a vector_base of the solution
*/
inline infra::vector_base svd_solve(infra::matrix_base A, 
				    infra::vector_base b, 
				    double tolerance = 1e-6) {


  infra_assert( A.height() == A.width() && A.width() == b.size(),
		"When calling svd_solve, A should be (n,n) and b should be of size n. "
		<< "You called with A.width() = " << A.width() << " A.height() = "
		<< A.height() << " and b.size() = " << b.size());

  // call SVD decomposition
  infra::vector w;
  infra::matrix U;
  infra::matrix V;
  SVDdecomposition(A,w,U,V);
  
  // zero singular values smaller than tolerance
  for (uint i=0; i<w.size(); ++i) {
    if (w[i] < tolerance) w[i] = 0.0;

  }

  // call back substitute and return its value
  return(SVDbacksubstitue(U,w,V,b));

}




#endif
/******************************************************************************
                                     E O F
******************************************************************************/


