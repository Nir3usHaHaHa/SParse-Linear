//=============================================================================
// File Name: LU.imp
// Written by: Shai Shalev-Shwartz (27.02.2006)
//=============================================================================
#ifndef _SHAIS_LU_IMP_
#define _SHAIS_LU_IMP_

#include <infra.h>
#include <cmath>
#define TINY 1.0e-20;

//-----------------------------------------------------------------------------
/** Replace a matrix with its LU decomposition.
    @param a the matrix A is replaced with its LU decomposition
    @param indx a referecne to an stl vector of int (to use with backsubstitution)
    @return true if a is invertible and false if a is singular
*/
inline bool LUdecomposition(infra::matrix_base &a, std::vector<int> &indx)
{

  infra_assert(a.width() == a.height(), 
	       "When calling LUdecomposition(), the matrix should be squared.");


  int n = a.width();
  int i=0,imax=0,j=0,k=0;
  double big,dum,sum,temp;
  
  indx.resize(n+1,0);
  infra::vector vv(n);

  float d=1.0;
  for (i=1;i<=n;i++) {
    big=0.0;
    for (j=1;j<=n;j++)
      if ((temp=fabs(a(i-1,j-1))) > big) big=temp;
    if (big == 0.0) { // matrix is singular 
      std::cerr << "Singular matrix in LU decomposition" << std::endl;
      return(false);
    }
    vv(i-1)=1.0/big;
  }
  for (j=1;j<=n;j++) {
    for (i=1;i<j;i++) {
      sum=a(i-1,j-1);
      for (k=1;k<i;k++) {
	sum -= a(i-1,k-1)*a(k-1,j-1);
      }
      a(i-1,j-1)=sum;
    }
    big=0.0;
    for (i=j;i<=n;i++) {
      sum=a(i-1,j-1);
      for (k=1;k<j;k++)
	sum -= a(i-1,k-1)*a(k-1,j-1);
      a(i-1,j-1)=sum;
      if ( (dum=vv(i-1)*fabs(sum)) >= big) {
	big=dum;
	imax=i;
      }
    }
    if (j != imax) {
      for (k=1;k<=n;k++) {
	dum=a(imax-1,k-1);
	a(imax-1,k-1)=a(j-1,k-1);
	a(j-1,k-1)=dum;
      }
      d = -(d);
      vv(imax-1)=vv(j-1);
    }
    indx[j]=imax;
    if (a(j-1,j-1) == 0.0) a(j-1,j-1)=TINY;
    if (j != n) {
      dum=1.0/(a(j-1,j-1));
      for (i=j+1;i<=n;i++) a(i-1,j-1) *= dum;
    }
  }


  return true;

}
#undef TINY



//-----------------------------------------------------------------------------
/** Solve the equation A*x = b, where A is in LU decomposed form (as produced
    by the function LUdecomposition)
    @param a the matrix in LU decomposition form
    @param indx stl vector of int as produced by LUdecomposition
    @param b the target vector. The outcome overrides this vector 
*/
inline void LUbacksubstitution(infra::matrix_base &a,std::vector<int> &indx, infra::vector_base &b)
{

  infra_assert(a.width() == a.height(), 
	       "When calling LUdecomposition(), the matrix should be squared.");


  int n = a.width();
  int i,ii=0,ip,j;
  double sum = 0;
  
  for (i=1;i<=n;i++) {
    ip=indx[i];
    sum=b(ip-1);
    b(ip-1)=b(i-1);
    if (ii)
      for (j=ii;j<=i-1;j++) sum -= a(i-1,j-1)*b(j-1);
    else if (sum) ii=i;
    b(i-1)=sum;
  }
  for (i=n;i>=1;i--) {
    sum=b(i-1);
    for (j=i+1;j<=n;j++) sum -= a(i-1,j-1)*b(j-1);
    b(i-1)=sum/a(i-1,i-1);
  }
}


//-----------------------------------------------------------------------------
/** Solve the equation A*x = b
    @param A A squared matrix
    @param b the target vector
    @param x the outcome
    @return true if A is invertible and false if A is singular
*/
inline bool LU_solve(const infra::matrix_base A,const infra::vector_base b,
				infra::vector_base x) 
{

  infra_assert(A.width() == A.height() && b.size() = A.width() && x.size() == b.size(), 
	       "When calling solve(), the dimensions of A,b,x should match.");

  infra::matrix AA(A);
  x = b;

  std::vector<int> indx;
  if (LUdecomposition(AA, indx)) {
    LUbacksubstitution(AA,indx,x);
    return true;
  } else {
    return false;
  }

}



// //-----------------------------------------------------------------------------
// /** Invert a matrix
//     @param A A squared matrix
//     @param invA The output inverse matrix
//     @return true if A is invertible and false if A is singular
// */
// inline bool inv(const infra::matrix_base &A,infra::matrix_base &invA)
// {

//   infra_assert(A.width() == A.height() && invA.width() = A.width() && invA.width() == invA.height(), 
// 	       "When calling inv(A,invA), the dimensions of A,invA should match.");

//   infra::matrix AA(A);

//   std::vector<int> indx;
//   if (!LUdecomposition(AA, indx)) {
//     return false;
//   }
  
//   infra::vector x(AA.width(),0.0);
//   for (int j=0;j < AA.width(); j++) {
//     x.zeros(); x(j) = 1.0;
//     lubksb(AA,indx,x);
//     invA.column(j) = x;
//   }

//   return true;
// }




#endif
/******************************************************************************
                                     E O F
******************************************************************************/


